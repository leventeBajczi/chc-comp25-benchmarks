; generated by Theta
; https://github.com/ftsrg/theta/

(set-logic HORN)

; declarations
(declare-fun main_init_0 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ FloatingPoint 8 24)) Bool)
(declare-fun main_final_2 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ FloatingPoint 8 24)) Bool)
(declare-fun __loc_50143_1 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ FloatingPoint 8 24)) Bool)
(declare-fun main_error_3 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ FloatingPoint 8 24)) Bool)

; facts, rules, queries
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::x| (_ BitVec 32)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|main::y| (_ FloatingPoint 8 24))) (=> true (main_init_0 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::x| |assume_abort_if_not::cond| |main::y|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret_new| (_ BitVec 1)) (|main_ret_new| (_ BitVec 32)) (|main::x| (_ BitVec 32)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|main::y| (_ FloatingPoint 8 24)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32))) (=> (and (__loc_50143_1 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::x| |assume_abort_if_not::cond| |main::y|) (and (and (not (= |__VERIFIER_assert::cond| #b00000000000000000000000000000000)) (= |__VERIFIER_assert_ret_new| #b0)) (= |main_ret_new| #b00000000000000000000000000000000))) (main_final_2 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret_new| |main_ret_new| |main::x| |assume_abort_if_not::cond| |main::y|))))
(assert (forall ((|__VERIFIER_assert::cond_new| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::x_new| (_ BitVec 32)) (|assume_abort_if_not::cond_new| (_ BitVec 32)) (|main::y_new| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main::x| (_ BitVec 32)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|main::y| (_ FloatingPoint 8 24))) (=> (and (main_init_0 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::x| |assume_abort_if_not::cond| |main::y|) (and (and (and (and (and true true) (= |assume_abort_if_not::cond_new| (ite (and (not (= #b00000000000000000000000000000000 (ite (bvsge |main::x_new| (bvneg #b00000000000000000000000000001010)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (bvsle |main::x_new| #b00000000000000000000000000001010) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= |assume_abort_if_not::cond_new| #b00000000000000000000000000000000))) (= |main::y_new| (fp.add RNE ((_ to_fp 8 24) RNE (bvmul |main::x_new| |main::x_new|)) (fp #b1  #b10000001 #b00000000000000000000000)))) (= |__VERIFIER_assert::cond_new| (ite (not (fp.eq |main::y_new| (fp #b0  #b00000000 #b00000000000000000000000))) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) (__loc_50143_1 |__VERIFIER_assert::cond_new| |__VERIFIER_assert_ret| |main_ret| |main::x_new| |assume_abort_if_not::cond_new| |main::y_new|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::x| (_ BitVec 32)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|main::y| (_ FloatingPoint 8 24))) (=> (and (__loc_50143_1 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::x| |assume_abort_if_not::cond| |main::y|) (= |__VERIFIER_assert::cond| #b00000000000000000000000000000000)) (main_error_3 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::x| |assume_abort_if_not::cond| |main::y|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::x| (_ BitVec 32)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|main::y| (_ FloatingPoint 8 24))) (=> (main_error_3 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::x| |assume_abort_if_not::cond| |main::y|) false)))

(check-sat)
(exit)