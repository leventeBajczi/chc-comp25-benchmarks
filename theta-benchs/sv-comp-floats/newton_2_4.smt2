; generated by Theta
; https://github.com/ftsrg/theta/

(set-logic HORN)

; declarations
(declare-fun main_init_0 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-fun main_final_2 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-fun __loc_137_1 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-fun main_error_3 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ BitVec 32) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)

; facts, rules, queries
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|main_ret| (_ BitVec 32)) (|main::IN| (_ FloatingPoint 8 24)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|f::x| (_ FloatingPoint 8 24)) (|f_ret| (_ FloatingPoint 8 24)) (|call_f_ret3| (_ FloatingPoint 8 24)) (|fp::x| (_ FloatingPoint 8 24)) (|fp_ret| (_ FloatingPoint 8 24)) (|call_fp_ret4| (_ FloatingPoint 8 24)) (|call_f_ret5| (_ FloatingPoint 8 24)) (|call_fp_ret6| (_ FloatingPoint 8 24))) (=> true (main_init_0 |main::x| |main_ret| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|main_ret_new| (_ BitVec 32)) (|main::IN| (_ FloatingPoint 8 24)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|f::x| (_ FloatingPoint 8 24)) (|f_ret| (_ FloatingPoint 8 24)) (|call_f_ret3| (_ FloatingPoint 8 24)) (|fp::x| (_ FloatingPoint 8 24)) (|fp_ret| (_ FloatingPoint 8 24)) (|call_fp_ret4| (_ FloatingPoint 8 24)) (|call_f_ret5| (_ FloatingPoint 8 24)) (|call_fp_ret6| (_ FloatingPoint 8 24)) (|main_ret| (_ BitVec 32))) (=> (and (__loc_137_1 |main::x| |main_ret| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|) (and (fp.lt ((_ to_fp 11 53) RNE |main::x|) (fp #b0  #b01111111011 #b1001100110011001100110011001100110011001100110011010)) (= |main_ret_new| #b00000000000000000000000000000000))) (main_final_2 |main::x| |main_ret_new| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|))))
(assert (forall ((|main::x_new| (_ FloatingPoint 8 24)) (|main_ret| (_ BitVec 32)) (|main::IN_new| (_ FloatingPoint 8 24)) (|assume_abort_if_not::cond_new| (_ BitVec 32)) (|f::x_new| (_ FloatingPoint 8 24)) (|f_ret_new| (_ FloatingPoint 8 24)) (|call_f_ret3_new| (_ FloatingPoint 8 24)) (|fp::x_new| (_ FloatingPoint 8 24)) (|fp_ret_new| (_ FloatingPoint 8 24)) (|call_fp_ret4_new| (_ FloatingPoint 8 24)) (|call_f_ret5_new| (_ FloatingPoint 8 24)) (|call_fp_ret6_new| (_ FloatingPoint 8 24)) (|main::x| (_ FloatingPoint 8 24)) (|main::IN| (_ FloatingPoint 8 24)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|f::x| (_ FloatingPoint 8 24)) (|f_ret| (_ FloatingPoint 8 24)) (|call_f_ret3| (_ FloatingPoint 8 24)) (|fp::x| (_ FloatingPoint 8 24)) (|fp_ret| (_ FloatingPoint 8 24)) (|call_fp_ret4| (_ FloatingPoint 8 24)) (|call_f_ret5| (_ FloatingPoint 8 24)) (|call_fp_ret6| (_ FloatingPoint 8 24)) (__tmp_2 (_ FloatingPoint 8 24)) (__tmp_4 (_ FloatingPoint 8 24)) (__tmp_3 (_ FloatingPoint 8 24)) (__tmp_0 (_ FloatingPoint 8 24)) (__tmp_1 (_ FloatingPoint 8 24))) (=> (and (main_init_0 |main::x| |main_ret| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and true true) (= |assume_abort_if_not::cond_new| (ite (and (not (= #b00000000000000000000000000000000 (ite (fp.gt |main::IN_new| (fp.neg (fp #b0  #b01111110 #b10011001100110011001100))) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (fp.lt |main::IN_new| (fp #b0  #b01111110 #b10011001100110011001100)) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= |assume_abort_if_not::cond_new| #b00000000000000000000000000000000))) (= __tmp_2 |main::IN_new|)) (= __tmp_4 (fp.add RNE (fp.add RNE (fp.add RNE __tmp_2 (fp.neg (fp.div RNE (fp.mul RNE (fp.mul RNE __tmp_2 __tmp_2) __tmp_2) (fp #b0  #b10000001 #b10000000000000000000000)))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE __tmp_2 __tmp_2) __tmp_2) __tmp_2) __tmp_2) (fp #b0  #b10000101 #b11100000000000000000000))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE __tmp_2 __tmp_2) __tmp_2) __tmp_2) __tmp_2) __tmp_2) __tmp_2) (fp #b0  #b10001011 #b00111011000000000000000))))) (= |call_f_ret3_new| __tmp_4)) (= __tmp_3 |main::IN_new|)) (= __tmp_0 (fp.add RNE (fp.add RNE (fp.add RNE (fp.neg (fp.div RNE (fp.mul RNE __tmp_3 __tmp_3) (fp #b0  #b10000000 #b00000000000000000000000))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE __tmp_3 __tmp_3) __tmp_3) __tmp_3) (fp #b0  #b10000011 #b10000000000000000000000))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE __tmp_3 __tmp_3) __tmp_3) __tmp_3) __tmp_3) __tmp_3) (fp #b0  #b10001000 #b01101000000000000000000))) (fp #b0  #b01111111 #b00000000000000000000000)))) (= |call_fp_ret4_new| __tmp_0)) (= __tmp_1 (fp.add RNE |main::IN_new| (fp.neg (fp.div RNE |call_f_ret3_new| |call_fp_ret4_new|))))) (= |f::x_new| __tmp_1)) (= |f_ret_new| (fp.add RNE (fp.add RNE (fp.add RNE |f::x_new| (fp.neg (fp.div RNE (fp.mul RNE (fp.mul RNE |f::x_new| |f::x_new|) |f::x_new|) (fp #b0  #b10000001 #b10000000000000000000000)))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE |f::x_new| |f::x_new|) |f::x_new|) |f::x_new|) |f::x_new|) (fp #b0  #b10000101 #b11100000000000000000000))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE |f::x_new| |f::x_new|) |f::x_new|) |f::x_new|) |f::x_new|) |f::x_new|) |f::x_new|) (fp #b0  #b10001011 #b00111011000000000000000))))) (= |call_f_ret5_new| |f_ret_new|)) (= |fp::x_new| __tmp_1)) (= |fp_ret_new| (fp.add RNE (fp.add RNE (fp.add RNE (fp.neg (fp.div RNE (fp.mul RNE |fp::x_new| |fp::x_new|) (fp #b0  #b10000000 #b00000000000000000000000))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE |fp::x_new| |fp::x_new|) |fp::x_new|) |fp::x_new|) (fp #b0  #b10000011 #b10000000000000000000000))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE |fp::x_new| |fp::x_new|) |fp::x_new|) |fp::x_new|) |fp::x_new|) |fp::x_new|) (fp #b0  #b10001000 #b01101000000000000000000))) (fp #b0  #b01111111 #b00000000000000000000000)))) (= |call_fp_ret6_new| |fp_ret_new|)) (= |main::x_new| (fp.add RNE __tmp_1 (fp.neg (fp.div RNE |call_f_ret5_new| |call_fp_ret6_new|)))))) (__loc_137_1 |main::x_new| |main_ret| |main::IN_new| |assume_abort_if_not::cond_new| |f::x_new| |f_ret_new| |call_f_ret3_new| |fp::x_new| |fp_ret_new| |call_fp_ret4_new| |call_f_ret5_new| |call_fp_ret6_new|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|main_ret| (_ BitVec 32)) (|main::IN| (_ FloatingPoint 8 24)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|f::x| (_ FloatingPoint 8 24)) (|f_ret| (_ FloatingPoint 8 24)) (|call_f_ret3| (_ FloatingPoint 8 24)) (|fp::x| (_ FloatingPoint 8 24)) (|fp_ret| (_ FloatingPoint 8 24)) (|call_fp_ret4| (_ FloatingPoint 8 24)) (|call_f_ret5| (_ FloatingPoint 8 24)) (|call_fp_ret6| (_ FloatingPoint 8 24))) (=> (and (__loc_137_1 |main::x| |main_ret| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|) (not (fp.lt ((_ to_fp 11 53) RNE |main::x|) (fp #b0  #b01111111011 #b1001100110011001100110011001100110011001100110011010)))) (main_error_3 |main::x| |main_ret| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|main_ret| (_ BitVec 32)) (|main::IN| (_ FloatingPoint 8 24)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|f::x| (_ FloatingPoint 8 24)) (|f_ret| (_ FloatingPoint 8 24)) (|call_f_ret3| (_ FloatingPoint 8 24)) (|fp::x| (_ FloatingPoint 8 24)) (|fp_ret| (_ FloatingPoint 8 24)) (|call_fp_ret4| (_ FloatingPoint 8 24)) (|call_f_ret5| (_ FloatingPoint 8 24)) (|call_fp_ret6| (_ FloatingPoint 8 24))) (=> (main_error_3 |main::x| |main_ret| |main::IN| |assume_abort_if_not::cond| |f::x| |f_ret| |call_f_ret3| |fp::x| |fp_ret| |call_fp_ret4| |call_f_ret5| |call_fp_ret6|) false)))

(check-sat)
(exit)