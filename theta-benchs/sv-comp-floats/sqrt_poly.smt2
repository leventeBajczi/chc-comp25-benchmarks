; generated by Theta
; https://github.com/ftsrg/theta/

(set-logic HORN)

; declarations
(declare-fun main_init_0 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ BitVec 32)) Bool)
(declare-fun main_final_2 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ BitVec 32)) Bool)
(declare-fun __loc_102_3 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ BitVec 32)) Bool)
(declare-fun __loc_50147_1 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ BitVec 32)) Bool)
(declare-fun main_error_4 ((_ BitVec 32) (_ BitVec 1) (_ BitVec 32) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ FloatingPoint 11 53) (_ BitVec 32)) Bool)

; facts, rules, queries
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|main::S| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32))) (=> true (main_init_0 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret_new| (_ BitVec 1)) (|main_ret_new| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|main::S| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32))) (=> (and (__loc_50147_1 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|) (and (and (not (= |__VERIFIER_assert::cond| #b00000000000000000000000000000000)) (= |__VERIFIER_assert_ret_new| #b0)) (= |main_ret_new| #b00000000000000000000000000000000))) (main_final_2 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret_new| |main_ret_new| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::I_new| (_ FloatingPoint 11 53)) (|main::S| (_ FloatingPoint 11 53)) (|sqrt2_new| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond_new| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32))) (=> (and (main_init_0 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|) (and (and (and (and (= |sqrt2_new| (fp #b0  #b01111111111 #b0110101000001001111001100000000000000000000000000000)) true) true) (= |assume_abort_if_not::cond_new| (ite (and (not (= #b00000000000000000000000000000000 (ite (fp.geq |main::I_new| (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (fp.leq |main::I_new| (fp #b0  #b10000000000 #b1000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= |assume_abort_if_not::cond_new| #b00000000000000000000000000000000)))) (__loc_102_3 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I_new| |main::S| |sqrt2_new| |assume_abort_if_not::cond_new|))))
(assert (forall ((|__VERIFIER_assert::cond_new| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|main::S_new| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main::S| (_ FloatingPoint 11 53))) (=> (and (__loc_102_3 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|) (and (and (fp.geq |main::I| (fp #b0  #b10000000000 #b0000000000000000000000000000000000000000000000000000)) (= |main::S_new| (fp.mul RNE |sqrt2| (fp.add RNE (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE (fp.add RNE (fp.div RNE |main::I| (fp #b0  #b10000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (fp.add RNE (fp #b0  #b01111111110 #b0000000000000000000000000000000000000000000000000000) (fp.neg (fp.mul RNE (fp #b0  #b01111111100 #b0000000000000000000000000000000000000000000000000000) (fp.add RNE (fp.div RNE |main::I| (fp #b0  #b10000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))))))) (= |__VERIFIER_assert::cond_new| (ite (and (not (= #b00000000000000000000000000000000 (ite (fp.geq |main::S_new| (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (fp.leq |main::S_new| (fp #b0  #b10000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) (__loc_50147_1 |__VERIFIER_assert::cond_new| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S_new| |sqrt2| |assume_abort_if_not::cond|))))
(assert (forall ((|__VERIFIER_assert::cond_new| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|main::S_new| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main::S| (_ FloatingPoint 11 53))) (=> (and (__loc_102_3 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|) (and (and (not (fp.geq |main::I| (fp #b0  #b10000000000 #b0000000000000000000000000000000000000000000000000000))) (= |main::S_new| (fp.add RNE (fp.mul RNE (fp.add RNE |main::I| (fp.neg (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (fp.add RNE (fp #b0  #b01111111110 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE (fp.add RNE |main::I| (fp.neg (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (fp.add RNE (fp.neg (fp #b0  #b01111111100 #b0000000000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.add RNE |main::I| (fp.neg (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (fp #b0  #b01111111011 #b0000000000000000000000000000000000000000000000000000)))))) (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (= |__VERIFIER_assert::cond_new| (ite (and (not (= #b00000000000000000000000000000000 (ite (fp.geq |main::S_new| (fp #b0  #b01111111111 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (fp.leq |main::S_new| (fp #b0  #b10000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) (__loc_50147_1 |__VERIFIER_assert::cond_new| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S_new| |sqrt2| |assume_abort_if_not::cond|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|main::S| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32))) (=> (and (__loc_50147_1 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|) (= |__VERIFIER_assert::cond| #b00000000000000000000000000000000)) (main_error_4 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|))))
(assert (forall ((|__VERIFIER_assert::cond| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|main::I| (_ FloatingPoint 11 53)) (|main::S| (_ FloatingPoint 11 53)) (|sqrt2| (_ FloatingPoint 11 53)) (|assume_abort_if_not::cond| (_ BitVec 32))) (=> (main_error_4 |__VERIFIER_assert::cond| |__VERIFIER_assert_ret| |main_ret| |main::I| |main::S| |sqrt2| |assume_abort_if_not::cond|) false)))

(check-sat)
(exit)