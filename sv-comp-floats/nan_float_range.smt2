; generated by Theta
; https://github.com/ftsrg/theta/

(set-logic HORN)

; declarations
(declare-fun main_init_0 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ BitVec 32) (_ BitVec 1)) Bool)
(declare-fun main_final_2 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ BitVec 32) (_ BitVec 1)) Bool)
(declare-fun __loc_73_1 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ BitVec 32) (_ BitVec 1)) Bool)
(declare-fun __loc_3297_3 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ BitVec 32) (_ BitVec 1)) Bool)
(declare-fun main_error_4 ((_ FloatingPoint 8 24) (_ BitVec 32) (_ BitVec 32) (_ BitVec 1)) Bool)

; facts, rules, queries
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main_ret| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1))) 
	(=> 
	true
	(main_init_0 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main_ret_new| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main_ret| (_ BitVec 32))) 
	(=> 
	(and (__loc_73_1 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|) (and (not (and (not (= #b00000000000000000000000000000000 (ite (fp.geq ((_ to_fp 11 53) RNE |main::x|) (fp #b1  #b10000100000 #b0010101000000101111100100000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (fp.leq ((_ to_fp 11 53) RNE |main::x|) (fp #b0  #b10000100000 #b0010101000000101111100100000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))))) (= |main_ret_new| #b00000000000000000000000000000000))) 
	(main_final_2 |main::x| |__VERIFIER_assert::cond| |main_ret_new| |__VERIFIER_assert_ret|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main_ret_new| (_ BitVec 32)) (|__VERIFIER_assert_ret_new| (_ BitVec 1)) (|main_ret| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1))) 
	(=> 
	(and (__loc_3297_3 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|) (and (and (not (= |__VERIFIER_assert::cond| #b00000000000000000000000000000000)) (= |__VERIFIER_assert_ret_new| #b0)) (= |main_ret_new| #b00000000000000000000000000000000))) 
	(main_final_2 |main::x| |__VERIFIER_assert::cond| |main_ret_new| |__VERIFIER_assert_ret_new|))))
(assert (forall ((|main::x_new| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main_ret| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|main::x| (_ FloatingPoint 8 24))) (=> (and (main_init_0 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|) (and true true)) (__loc_73_1 |main::x_new| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond_new| (_ BitVec 32)) (|main_ret| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1)) (|__VERIFIER_assert::cond| (_ BitVec 32))) (=> (and (__loc_73_1 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|) (and (and (not (= #b00000000000000000000000000000000 (ite (fp.geq ((_ to_fp 11 53) RNE |main::x|) (fp #b1  #b10000100000 #b0010101000000101111100100000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000))) (not (= #b00000000000000000000000000000000 (ite (fp.leq ((_ to_fp 11 53) RNE |main::x|) (fp #b0  #b10000100000 #b0010101000000101111100100000000000000000000000000000)) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) (= |__VERIFIER_assert::cond_new| (ite (fp.eq |main::x| |main::x|) #b00000000000000000000000000000001 #b00000000000000000000000000000000)))) (__loc_3297_3 |main::x| |__VERIFIER_assert::cond_new| |main_ret| |__VERIFIER_assert_ret|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main_ret| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1))) (=> (and (__loc_3297_3 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|) (= |__VERIFIER_assert::cond| #b00000000000000000000000000000000)) (main_error_4 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|))))
(assert (forall ((|main::x| (_ FloatingPoint 8 24)) (|__VERIFIER_assert::cond| (_ BitVec 32)) (|main_ret| (_ BitVec 32)) (|__VERIFIER_assert_ret| (_ BitVec 1))) (=> (main_error_4 |main::x| |__VERIFIER_assert::cond| |main_ret| |__VERIFIER_assert_ret|) false)))

(check-sat)
(exit)
